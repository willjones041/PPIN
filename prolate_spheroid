import math

def radial_distance_from_center(x, y, z, cube_size):
    """
    Calculate the radial distance from the center of the cube.
    
    Args:
    x, y, z: Cartesian coordinates of the point.
    cube_size: Length of the side of the cube.
    
    Returns:
    Radial distance from the center of the cube.
    """
    # The center of the cube is at (cube_size/2, cube_size/2, cube_size/2)
    center_x = center_y = center_z = cube_size / 2
    distance = math.sqrt((x - center_x) ** 2 + (y - center_y) ** 2 + (z - center_z) ** 2)
    return distance

def is_within_prolate_spheroid(x, y, z, a, b, c):
    """
    Check if the point (x, y, z) is inside a prolate spheroid.
    
    Args:
    x, y, z: Cartesian coordinates of the point.
    a, b, c: Semi-major and semi-minor axes of the prolate spheroid.
    
    Returns:
    True if the point is inside or on the prolate spheroid, False otherwise.
    """
    # Equation for the prolate spheroid: (x^2 / a^2) + (y^2 / b^2) + (z^2 / c^2) <= 1
    equation_value = (x**2 / a**2) + (y**2 / b**2) + (z**2 / c**2)
    return equation_value <= 1

# Example usage
cube_size = 10  # Length of one side of the cube
a, b, c = 5, 3, 3  # Semi-major and semi-minor axes of the prolate spheroid

# Point inside the cube (example coordinates)
x, y, z = 3, 4, 2

# Calculate radial distance from the center of the cube
distance = radial_distance_from_center(x, y, z, cube_size)
print(f"Radial distance from the center of the cube: {distance:.2f}")

# Check if the point lies within the prolate spheroid
if is_within_prolate_spheroid(x, y, z, a, b, c):
    print("The point is inside the prolate spheroid.")
else:
    print("The point is outside the prolate spheroid.")
